/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.MenuSemana;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import logica.Control;
import negocio.Platillo;
import negocio.PlatilloMenu;

/**
 *
 * @author ed000
 */
public class VMenu extends javax.swing.JDialog {

    private Frame parent;
    private JButton[] arregloBotones = new JButton[8];
    private int diaSeleccionado = 1;
    private ArrayList<PlatilloMenu> listaDesayunos;
    private ArrayList<PlatilloMenu> listaComidas;
    private ArrayList<PlatilloMenu> listaCenas;
    private PlatilloMenu sopaDelDia = null;

    public VMenu(java.awt.Frame parent, boolean modal) {

        super(parent, modal);
        initComponents();
        this.parent = parent;
        arregloBotones[1] = btnLunes;
        arregloBotones[2] = btnMartes;
        arregloBotones[3] = btnMiercoles;
        arregloBotones[4] = btnJueves;
        arregloBotones[5] = btnViernes;
        arregloBotones[6] = btnSabado;
        arregloBotones[7] = btnDomingo;
        txtUsuario.setText(Control.usuarioActivo.getNombre());
        setBounds(parent.getBounds());

        establecerMenu(1);
        agregarEventoSeleccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnLunes = new javax.swing.JButton();
        btnMartes = new javax.swing.JButton();
        btnMiercoles = new javax.swing.JButton();
        btnJueves = new javax.swing.JButton();
        btnViernes = new javax.swing.JButton();
        btnSabado = new javax.swing.JButton();
        btnDomingo = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDesayunos = new javax.swing.JTable();
        btnBorrarDesayuno = new javax.swing.JButton();
        btnNuevoDesayuno = new javax.swing.JButton();
        btnBorrarTodosDesayunos = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        spinnerCantDesayunos = new javax.swing.JSpinner();
        btnGuardarDesayuno = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaComidas = new javax.swing.JTable();
        btnBorrarComida = new javax.swing.JButton();
        btnAgregarComida = new javax.swing.JButton();
        btnBorrarTodasComidas = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        spinnerCantComidas = new javax.swing.JSpinner();
        btnGuardarComida = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        btnElegirSopa = new javax.swing.JButton();
        campoSopa = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCenas = new javax.swing.JTable();
        btnBorrarCena = new javax.swing.JButton();
        btnAgregarCena = new javax.swing.JButton();
        btnBorrarTodasCenas = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        spinnerCantCenas = new javax.swing.JSpinner();
        btnGuardarCena = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MENÚ SEMANAL");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1377, 667));
        setModal(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel5.setText("MENÚ SEMANAL");

        btnLunes.setBackground(java.awt.Color.gray);
        btnLunes.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnLunes.setFocusPainted(false);
        btnLunes.setLabel("LUNES");
        btnLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLunesActionPerformed(evt);
            }
        });

        btnMartes.setBackground(java.awt.Color.gray);
        btnMartes.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnMartes.setText("MARTES");
        btnMartes.setFocusPainted(false);
        btnMartes.setPreferredSize(new java.awt.Dimension(68, 32));
        btnMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMartesActionPerformed(evt);
            }
        });

        btnMiercoles.setBackground(java.awt.Color.gray);
        btnMiercoles.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnMiercoles.setText("MIERCOLES");
        btnMiercoles.setFocusPainted(false);
        btnMiercoles.setPreferredSize(new java.awt.Dimension(68, 32));
        btnMiercoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMiercolesActionPerformed(evt);
            }
        });

        btnJueves.setBackground(java.awt.Color.gray);
        btnJueves.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnJueves.setText("JUEVES");
        btnJueves.setFocusPainted(false);
        btnJueves.setPreferredSize(new java.awt.Dimension(68, 32));
        btnJueves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJuevesActionPerformed(evt);
            }
        });

        btnViernes.setBackground(java.awt.Color.gray);
        btnViernes.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnViernes.setText("VIERNES");
        btnViernes.setFocusPainted(false);
        btnViernes.setPreferredSize(new java.awt.Dimension(68, 32));
        btnViernes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViernesActionPerformed(evt);
            }
        });

        btnSabado.setBackground(java.awt.Color.gray);
        btnSabado.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnSabado.setText("SÁBADO");
        btnSabado.setFocusPainted(false);
        btnSabado.setPreferredSize(new java.awt.Dimension(68, 32));
        btnSabado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSabadoActionPerformed(evt);
            }
        });

        btnDomingo.setBackground(java.awt.Color.gray);
        btnDomingo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnDomingo.setText("DOMINGO");
        btnDomingo.setFocusPainted(false);
        btnDomingo.setPreferredSize(new java.awt.Dimension(68, 32));
        btnDomingo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDomingoActionPerformed(evt);
            }
        });

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vista/768px-Back_Arrow.svg.png"))); // NOI18N
        btnVolver.setBorder(null);
        btnVolver.setBorderPainted(false);
        btnVolver.setContentAreaFilled(false);
        btnVolver.setFocusable(false);
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVolver)
                .addGap(500, 500, 500)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(btnLunes, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnMartes, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnJueves, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnViernes, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnSabado, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnDomingo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVolver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLunes, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(btnMartes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMiercoles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnJueves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViernes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSabado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDomingo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setPreferredSize(new java.awt.Dimension(449, 0));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("DESAYUNOS");

        tablaDesayunos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaDesayunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PLATILLO", "CANTIDAD", "RESERVAS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaDesayunos.setRowSelectionAllowed(false);
        tablaDesayunos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaDesayunos);

        btnBorrarDesayuno.setText("BORRAR");
        btnBorrarDesayuno.setEnabled(false);
        btnBorrarDesayuno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarDesayunoActionPerformed(evt);
            }
        });

        btnNuevoDesayuno.setText("NUEVO");
        btnNuevoDesayuno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoDesayunoActionPerformed(evt);
            }
        });

        btnBorrarTodosDesayunos.setText("BORRAR TODOS");
        btnBorrarTodosDesayunos.setEnabled(false);
        btnBorrarTodosDesayunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarTodosDesayunosActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setText("Modificar seleccionado");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel6.setText("Cantidad:");

        spinnerCantDesayunos.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        spinnerCantDesayunos.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCantDesayunos.setEnabled(false);
        spinnerCantDesayunos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCantDesayunosStateChanged(evt);
            }
        });

        btnGuardarDesayuno.setText("GUARDAR");
        btnGuardarDesayuno.setEnabled(false);
        btnGuardarDesayuno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDesayunoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addComponent(jLabel1))
                            .addComponent(btnBorrarDesayuno)
                            .addComponent(btnBorrarTodosDesayunos, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(spinnerCantDesayunos, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 297, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGuardarDesayuno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(btnNuevoDesayuno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNuevoDesayuno, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnBorrarDesayuno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBorrarTodosDesayunos, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spinnerCantDesayunos, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarDesayuno, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setPreferredSize(new java.awt.Dimension(449, 0));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText("COMIDAS");

        tablaComidas.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaComidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PLATILLO", "CANTIDAD", "RESERVAS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaComidas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaComidas);

        btnBorrarComida.setText("BORRAR");
        btnBorrarComida.setEnabled(false);
        btnBorrarComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarComidaActionPerformed(evt);
            }
        });

        btnAgregarComida.setText("NUEVO");
        btnAgregarComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarComidaActionPerformed(evt);
            }
        });

        btnBorrarTodasComidas.setText("BORRAR TODOS");
        btnBorrarTodasComidas.setEnabled(false);
        btnBorrarTodasComidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarTodasComidasActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel8.setText("Modificar seleccionado");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel9.setText("Cantidad:");

        spinnerCantComidas.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        spinnerCantComidas.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCantComidas.setEnabled(false);
        spinnerCantComidas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCantComidasStateChanged(evt);
            }
        });

        btnGuardarComida.setText("GUARDAR");
        btnGuardarComida.setEnabled(false);
        btnGuardarComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarComidaActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel13.setText("Sopa del día:");

        btnElegirSopa.setText("ELEGIR");
        btnElegirSopa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirSopaActionPerformed(evt);
            }
        });

        campoSopa.setEditable(false);
        campoSopa.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(179, 179, 179))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(campoSopa, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnElegirSopa)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(spinnerCantComidas, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarComida, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnBorrarTodasComidas, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnBorrarComida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarComida, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoSopa, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnElegirSopa, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrarComida, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarComida, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(btnBorrarTodasComidas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarComida, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerCantComidas, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setPreferredSize(new java.awt.Dimension(449, 0));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("CENAS");

        tablaCenas.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaCenas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PLATILLO", "CANTIDAD", "RESERVAS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCenas.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaCenas);

        btnBorrarCena.setText("BORRAR");
        btnBorrarCena.setEnabled(false);
        btnBorrarCena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarCenaActionPerformed(evt);
            }
        });

        btnAgregarCena.setText("NUEVO");
        btnAgregarCena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCenaActionPerformed(evt);
            }
        });

        btnBorrarTodasCenas.setText("BORRAR TODOS");
        btnBorrarTodasCenas.setEnabled(false);
        btnBorrarTodasCenas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarTodasCenasActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel11.setText("Modificar seleccionado");

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel12.setText("Cantidad:");

        spinnerCantCenas.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        spinnerCantCenas.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinnerCantCenas.setEnabled(false);
        spinnerCantCenas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCantCenasStateChanged(evt);
            }
        });

        btnGuardarCena.setText("GUARDAR");
        btnGuardarCena.setEnabled(false);
        btnGuardarCena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCenaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBorrarCena)
                            .addComponent(btnBorrarTodasCenas, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(spinnerCantCenas, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 205, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGuardarCena, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(btnAgregarCena, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(177, 177, 177))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAgregarCena, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnBorrarCena, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBorrarTodasCenas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(spinnerCantCenas, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarCena, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)))
        );

        txtUsuario.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtUsuario.setText("<nombre usuario>");

        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("USUARIO:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsuario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(txtUsuario))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLunesActionPerformed
        establecerMenu(1);
    }//GEN-LAST:event_btnLunesActionPerformed

    private void btnMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMartesActionPerformed
        establecerMenu(2);
    }//GEN-LAST:event_btnMartesActionPerformed

    private void btnMiercolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMiercolesActionPerformed
        establecerMenu(3);
    }//GEN-LAST:event_btnMiercolesActionPerformed

    private void btnJuevesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJuevesActionPerformed
        establecerMenu(4);
    }//GEN-LAST:event_btnJuevesActionPerformed

    private void btnViernesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViernesActionPerformed
        establecerMenu(5);
    }//GEN-LAST:event_btnViernesActionPerformed

    private void btnSabadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSabadoActionPerformed
        establecerMenu(6);
    }//GEN-LAST:event_btnSabadoActionPerformed

    private void btnDomingoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDomingoActionPerformed
        establecerMenu(7);
    }//GEN-LAST:event_btnDomingoActionPerformed

    private void btnNuevoDesayunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoDesayunoActionPerformed
        ArrayList<Platillo> listaPlatillos = Control.platillos.consultarListaOrdenada();
        for (PlatilloMenu platilloMenu : listaDesayunos) {
            if (listaPlatillos.contains(platilloMenu.getPlatillo())) {
                listaPlatillos.remove(platilloMenu.getPlatillo());
            }
        }
        if (listaPlatillos.size() > 0) {
            lanzarModalAgregar(listaPlatillos, "DESAYUNO");
        } else {
            JOptionPane.showMessageDialog(this, "No existen platillos que se puedan agregar al menú.");
        }
    }//GEN-LAST:event_btnNuevoDesayunoActionPerformed

    private void btnAgregarComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarComidaActionPerformed
        ArrayList<Platillo> listaPlatillos = Control.platillos.consultarListaOrdenada();
        for (PlatilloMenu platilloMenu : listaComidas) {
            if (listaPlatillos.contains(platilloMenu.getPlatillo())) {
                listaPlatillos.remove(platilloMenu.getPlatillo());
            }
        }
        if (listaPlatillos.size() > 0) {
            lanzarModalAgregar(listaPlatillos, "COMIDA");
        } else {
            JOptionPane.showMessageDialog(this, "No existen platillos que se puedan agregar al menú.");
        }
    }//GEN-LAST:event_btnAgregarComidaActionPerformed

    private void btnAgregarCenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCenaActionPerformed
        ArrayList<Platillo> listaPlatillos = Control.platillos.consultarListaOrdenada();
        for (PlatilloMenu platilloMenu : listaCenas) {
            if (listaPlatillos.contains(platilloMenu.getPlatillo())) {
                listaPlatillos.remove(platilloMenu.getPlatillo());
            }
        }
        if (listaPlatillos.size() > 0) {
            lanzarModalAgregar(listaPlatillos, "CENA");
        } else {
            JOptionPane.showMessageDialog(this, "No existen platillos que se puedan agregar al menú.");        // TODO add your handling code here:
        }
    }//GEN-LAST:event_btnAgregarCenaActionPerformed

    private void btnBorrarDesayunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarDesayunoActionPerformed
        PlatilloMenu pm = listaDesayunos.get(tablaDesayunos.getSelectedRow());
        boolean borrar = true;
        if (pm.getReservados() > 0) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "El platillo seleccionado cuenta con reservas agregadas\n¿Desea eliminarlo de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        if (borrar) {
            if (Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                reestablecedesayunos();
            } else {
                JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBorrarDesayunoActionPerformed

    private void btnBorrarComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarComidaActionPerformed
        PlatilloMenu pm = listaComidas.get(tablaComidas.getSelectedRow());
        boolean borrar = true;
        if (pm.getReservados() > 0) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "El platillo seleccionado cuenta con reservas agregadas\n¿Desea eliminarlo de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        if (borrar) {
            if (Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                reestableceComidas();
            } else {
                JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBorrarComidaActionPerformed

    private void btnBorrarCenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarCenaActionPerformed
        PlatilloMenu pm = listaCenas.get(tablaCenas.getSelectedRow());
        boolean borrar = true;
        if (pm.getReservados() > 0) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "El platillo seleccionado cuenta con reservas agregadas\n¿Desea eliminarlo de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        if (borrar) {
            if (Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                reestableceCenas();
            } else {
                JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBorrarCenaActionPerformed

    private void btnBorrarTodosDesayunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarTodosDesayunosActionPerformed
        boolean hayReservas = false;
        // Busca en el menu actual si hay algún platillo con reserva
        for (PlatilloMenu pm : listaDesayunos) {
            if (pm.getReservados() > 0) {
                hayReservas = true;
                break;
            }
        }
        boolean borrar = true;
        // Si se encontró uno con reserva
        if (hayReservas) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "Uno o más platillos cuentan con reservas\n¿Desea eliminarlos de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        // Si la opción sigue siendo afirmativa
        if (borrar) {
            // Se itera en la lista para eliminar cada uno
            for (PlatilloMenu pm : listaDesayunos) {
                // Si no se pudo eliminar alguno
                if (!Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                    JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
                    break;
                }
                reestablecedesayunos();
            }
        }
    }//GEN-LAST:event_btnBorrarTodosDesayunosActionPerformed

    private void btnBorrarTodasComidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarTodasComidasActionPerformed
        boolean hayReservas = false;
        // Busca en el menu actual si hay algún platillo con reserva
        for (PlatilloMenu pm : listaComidas) {
            if (pm.getReservados() > 0) {
                hayReservas = true;
                break;
            }
        }
        boolean borrar = true;
        // Si se encontró uno con reserva
        if (hayReservas) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "Uno o más platillos cuentan con reservas\n¿Desea eliminarlos de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        // Si la opción sigue siendo afirmativa
        if (borrar) {
            // Se itera en la lista para eliminar cada uno
            for (PlatilloMenu pm : listaComidas) {
                // Si no se pudo eliminar alguno
                if (!Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                    JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
                    break;
                }
                reestableceComidas();
            }
        }
    }//GEN-LAST:event_btnBorrarTodasComidasActionPerformed

    private void btnBorrarTodasCenasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarTodasCenasActionPerformed
        boolean hayReservas = false;
        // Busca en el menu actual si hay algún platillo con reserva
        for (PlatilloMenu pm : listaCenas) {
            if (pm.getReservados() > 0) {
                hayReservas = true;
                break;
            }
        }
        boolean borrar = true;
        // Si se encontró uno con reserva
        if (hayReservas) {
            int opcion = JOptionPane.showConfirmDialog(parent,
                    "Uno o más platillos cuentan con reservas\n¿Desea eliminarlos de cualquier forma(las reservas no se eliminarán)?",
                    "ATENCIÓN",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            borrar = (opcion == JOptionPane.OK_OPTION);
        }
        // Si la opción sigue siendo afirmativa
        if (borrar) {
            // Se itera en la lista para eliminar cada uno
            for (PlatilloMenu pm : listaCenas) {
                // Si no se pudo eliminar alguno
                if (!Control.menu.eliminar(pm.getIdPlatilloMenu())) {
                    JOptionPane.showMessageDialog(parent, "ERROR", "Ocurrió un error al eliminar el platillo del menú.\nIntente nuevamente.", JOptionPane.ERROR_MESSAGE);
                    break;
                }
                reestableceCenas();
            }
        }
    }//GEN-LAST:event_btnBorrarTodasCenasActionPerformed

    private void btnElegirSopaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirSopaActionPerformed
        ArrayList<Platillo> lSopas = Control.platillos.consultarSopas();
        if (lSopas.size() > 0) {
            ElegirSopa vsopas = new ElegirSopa(parent, true, lSopas);
            vsopas.setVisible(true);
            if (vsopas.seleccionada != null) {

                if (sopaDelDia != null) {
                    sopaDelDia.setPlatillo(vsopas.seleccionada);
                    if (Control.menu.actualizar(sopaDelDia)) {
                        reestableceComidas();
                    } else {
                        JOptionPane.showMessageDialog(parent, "Ocurrió un error al actualizar la sopa del día. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    sopaDelDia = new PlatilloMenu(0, vsopas.seleccionada, diaSeleccionado, 0, 0, "SOPA");
                    if (Control.menu.agregar(sopaDelDia)) {
                        sopaDelDia = Control.menu.consultarUltimo();
                        reestableceComidas();
                    } else {
                        JOptionPane.showMessageDialog(parent, "Ocurrió un error al actualizar la sopa del día. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(parent, "NO existen sopas registradas en la lista de platillos.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnElegirSopaActionPerformed

    private void spinnerCantDesayunosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCantDesayunosStateChanged
        if(spinnerCantDesayunos.isEnabled()){
        PlatilloMenu seleccionado = listaDesayunos.get(tablaDesayunos.getSelectedRow());
        btnGuardarDesayuno.setEnabled((int) spinnerCantDesayunos.getValue() != seleccionado.getCantidad());
        }
    }//GEN-LAST:event_spinnerCantDesayunosStateChanged

    private void spinnerCantComidasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCantComidasStateChanged
         if(spinnerCantComidas.isEnabled()){
        PlatilloMenu seleccionado = listaComidas.get(tablaComidas.getSelectedRow());
        btnGuardarComida.setEnabled((int) spinnerCantComidas.getValue() != seleccionado.getCantidad());
         }
    }//GEN-LAST:event_spinnerCantComidasStateChanged

    private void spinnerCantCenasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCantCenasStateChanged
         if(spinnerCantCenas.isEnabled()){
        PlatilloMenu seleccionado = listaCenas.get(tablaCenas.getSelectedRow());
        btnGuardarCena.setEnabled((int) spinnerCantCenas.getValue() != seleccionado.getCantidad());
         }
    }//GEN-LAST:event_spinnerCantCenasStateChanged

    private void btnGuardarDesayunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDesayunoActionPerformed
        PlatilloMenu seleccionado = listaDesayunos.get(tablaDesayunos.getSelectedRow());
        seleccionado.setCantidad((int) spinnerCantDesayunos.getValue());
        if (Control.menu.actualizar(seleccionado)) {
            reestablecedesayunos();
        } else {
            JOptionPane.showMessageDialog(parent, "Ocurrió un error al actualizar el platillo. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnGuardarDesayunoActionPerformed

    private void btnGuardarComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarComidaActionPerformed
        PlatilloMenu seleccionado = listaComidas.get(tablaComidas.getSelectedRow());
        seleccionado.setCantidad((int) spinnerCantComidas.getValue());
        if (Control.menu.actualizar(seleccionado)) {
            reestableceComidas();
        } else {
            JOptionPane.showMessageDialog(parent, "Ocurrió un error al actualizar el platillo. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarComidaActionPerformed

    private void btnGuardarCenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCenaActionPerformed
        PlatilloMenu seleccionado = listaCenas.get(tablaCenas.getSelectedRow());
        seleccionado.setCantidad((int) spinnerCantCenas.getValue());
        if (Control.menu.actualizar(seleccionado)) {
            reestableceCenas();
        } else {
            JOptionPane.showMessageDialog(parent, "Ocurrió un error al actualizar el platillo. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnGuardarCenaActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void establecerMenu(int dia) {
        if (dia != diaSeleccionado || diaSeleccionado == 1) {
            arregloBotones[diaSeleccionado].setBackground(Color.gray);
            arregloBotones[dia].setBackground(Color.green);
            diaSeleccionado = dia;
            reestablecedesayunos();
            reestableceComidas();
            reestableceCenas();
        }

    }

    private void reestablecedesayunos() {
        Object[] columnas = {"PLATILLO", "CANTIDAD", "RESERVAS"};
        // Consulta el menú de desayunos par el día
        listaDesayunos = Control.menu.consultarMenuDiaCategoria(diaSeleccionado, "DESAYUNO");
        Object[][] modeloDe = new Object[listaDesayunos.size()][3];
        int x = 0;
        for (PlatilloMenu pm : listaDesayunos) {
            modeloDe[x][0] = pm;
            modeloDe[x][1] = pm.getCantidad();
            modeloDe[x][2] = pm.getReservados();
            x++;
        }
        tablaDesayunos.setDefaultEditor(Object.class, null);
        tablaDesayunos.setModel(new DefaultTableModel(modeloDe, columnas));
        tablaDesayunos.setCellSelectionEnabled(false);
        tablaDesayunos.setRowSelectionAllowed(true);
        tablaDesayunos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaDesayunos.setSelectionBackground(Color.lightGray);
        btnBorrarDesayuno.setEnabled(false);
        spinnerCantDesayunos.setEnabled(false);
        spinnerCantDesayunos.setValue(0);
        btnGuardarDesayuno.setEnabled(false);

        btnBorrarTodosDesayunos.setEnabled(listaDesayunos.size() > 0);

    }

    private void reestableceComidas() {
        Object[] columnas = {"PLATILLO", "CANTIDAD", "RESERVAS"};
        // Consulta el menú de comidas para el día
        listaComidas = Control.menu.consultarMenuDiaCategoria(diaSeleccionado, "COMIDA");
        Object[][] modeloCo = new Object[listaComidas.size()][3];
        int x = 0;
        for (PlatilloMenu pm : listaComidas) {
            modeloCo[x][0] = pm;
            modeloCo[x][1] = pm.getCantidad();
            modeloCo[x][2] = pm.getReservados();
            x++;
        }
        tablaComidas.setDefaultEditor(Object.class, null);
        tablaComidas.setModel(new DefaultTableModel(modeloCo, columnas));
        tablaComidas.setCellSelectionEnabled(false);
        tablaComidas.setRowSelectionAllowed(true);
        tablaComidas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaComidas.setSelectionBackground(Color.lightGray);
        btnBorrarComida.setEnabled(false);
        spinnerCantComidas.setEnabled(false);
        spinnerCantComidas.setValue(0);
        btnGuardarComida.setEnabled(false);
        btnBorrarTodasComidas.setEnabled(listaComidas.size() > 0);
        ArrayList<PlatilloMenu> lSopa = Control.menu.consultarMenuDiaCategoria(diaSeleccionado, "SOPA");
        if (lSopa.size() > 0) {
            campoSopa.setText(lSopa.get(0).getPlatillo().getNombre());
            sopaDelDia = lSopa.get(0);
        } else {
            sopaDelDia = null;
            campoSopa.setText("");
        }

        btnBorrarTodasComidas.setEnabled(listaComidas.size() > 0);
    }

    private void reestableceCenas() {
        Object[] columnas = {"PLATILLO", "CANTIDAD", "RESERVAS"};
        // Consulta el menú de cenas para el día
        listaCenas = Control.menu.consultarMenuDiaCategoria(diaSeleccionado, "CENA");
        Object[][] modeloCe = new Object[listaCenas.size()][3];
        int x = 0;
        for (PlatilloMenu pm : listaCenas) {
            modeloCe[x][0] = pm;
            modeloCe[x][1] = pm.getCantidad();
            modeloCe[x][2] = pm.getReservados();
            x++;
        }
        tablaCenas.setDefaultEditor(Object.class, null);
        tablaCenas.setModel(new DefaultTableModel(modeloCe, columnas));
        tablaCenas.setCellSelectionEnabled(false);
        tablaCenas.setRowSelectionAllowed(true);
        tablaCenas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaCenas.setSelectionBackground(Color.lightGray);
        btnBorrarCena.setEnabled(false);
        spinnerCantCenas.setEnabled(false);
        spinnerCantCenas.setValue(0);
        btnGuardarCena.setEnabled(false);
        btnBorrarTodasCenas.setEnabled(listaCenas.size() > 0);

    }

    private void agregarEventoSeleccion() {
        tablaDesayunos.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tablaDesayunos.rowAtPoint(evt.getPoint());
                int col = tablaDesayunos.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    PlatilloMenu pl = (PlatilloMenu) tablaDesayunos.getValueAt(row, 0);

                    btnBorrarDesayuno.setEnabled(true);

                    spinnerCantDesayunos.setEnabled(true);
                    spinnerCantDesayunos.setValue(pl.getCantidad());

                } else {
                    btnBorrarDesayuno.setEnabled(false);
                    spinnerCantDesayunos.setEnabled(false);
                    spinnerCantDesayunos.setValue(0);
                    btnGuardarDesayuno.setEnabled(false);
                }

            }
        });
        tablaComidas.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tablaComidas.rowAtPoint(evt.getPoint());
                int col = tablaComidas.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    PlatilloMenu pl = (PlatilloMenu) tablaComidas.getValueAt(row, 0);

                    btnBorrarComida.setEnabled(true);

                    spinnerCantComidas.setEnabled(true);
                    spinnerCantComidas.setValue(pl.getCantidad());

                } else {
                    btnBorrarComida.setEnabled(false);
                    spinnerCantComidas.setEnabled(false);
                    spinnerCantComidas.setValue(0);
                    btnGuardarComida.setEnabled(false);
                }

            }
        });
        tablaCenas.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tablaCenas.rowAtPoint(evt.getPoint());
                int col = tablaCenas.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    PlatilloMenu pl = (PlatilloMenu) tablaCenas.getValueAt(row, 0);

                    btnBorrarCena.setEnabled(true);
                    spinnerCantCenas.setEnabled(true);
                    spinnerCantCenas.setValue(pl.getCantidad());

                } else {
                    btnBorrarCena.setEnabled(false);
                    btnGuardarCena.setEnabled(false);
                    spinnerCantCenas.setValue(0);
                    btnGuardarCena.setEnabled(false);
                }

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCena;
    private javax.swing.JButton btnAgregarComida;
    private javax.swing.JButton btnBorrarCena;
    private javax.swing.JButton btnBorrarComida;
    private javax.swing.JButton btnBorrarDesayuno;
    private javax.swing.JButton btnBorrarTodasCenas;
    private javax.swing.JButton btnBorrarTodasComidas;
    private javax.swing.JButton btnBorrarTodosDesayunos;
    private javax.swing.JButton btnDomingo;
    private javax.swing.JButton btnElegirSopa;
    private javax.swing.JButton btnGuardarCena;
    private javax.swing.JButton btnGuardarComida;
    private javax.swing.JButton btnGuardarDesayuno;
    private javax.swing.JButton btnJueves;
    private javax.swing.JButton btnLunes;
    private javax.swing.JButton btnMartes;
    private javax.swing.JButton btnMiercoles;
    private javax.swing.JButton btnNuevoDesayuno;
    private javax.swing.JButton btnSabado;
    private javax.swing.JButton btnViernes;
    private javax.swing.JButton btnVolver;
    private javax.swing.JTextField campoSopa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label1;
    private javax.swing.JSpinner spinnerCantCenas;
    private javax.swing.JSpinner spinnerCantComidas;
    private javax.swing.JSpinner spinnerCantDesayunos;
    private javax.swing.JTable tablaCenas;
    private javax.swing.JTable tablaComidas;
    private javax.swing.JTable tablaDesayunos;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void lanzarModalAgregar(ArrayList<Platillo> listaPlatillos, String categoria) {
        AgregarPlatillo agregar = new AgregarPlatillo(parent, true, listaPlatillos, categoria);
        agregar.setVisible(true);
        // Si se seleccionó un platillo al abrir la ventana
        if (agregar.platilloSelec != null) {
            PlatilloMenu pm = new PlatilloMenu(0, agregar.platilloSelec, diaSeleccionado, agregar.cantidad, 0, categoria);
            if (Control.menu.agregar(pm)) {
                switch (categoria) {
                    case "DESAYUNO":
                        reestablecedesayunos();
                        break;
                    case "COMIDA":
                        reestableceComidas();
                        break;
                    case "CENA":
                        reestableceCenas();
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(parent, "Ocurrió un error al agregar el platillo al menú. Intente nuevamente.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
